// Generated by CoffeeScript 1.9.2

/*
jQuery yacal Plugin v0.2.0
https://github.com/eduludi/jquery-yacal

Authors:
 - Eduardo Ludi @eduludi
 - Some s took from Pickaday: https://github.com/dbushell/Pikaday
   (David Bushell @dbushell and Ramiro Rikkert @RamRik)
 - isLeapYear: Matti Virkkunen (http://stackoverflow.com/a/4881951)
        
Released under the MIT license
 */
(function($, doc, win) {
  "use strict";
  var _config, _d, _i18n, _name, _opts, _ph, _tpl, changeMonth, getDaysInMonth, getWeek, inRange, isDate, isLeapYear, isSelected, isToday, isWeekend, renderDay, renderMonth, zeroHour;
  _name = 'yacal';
  _d = null;
  _tpl = {};
  _i18n = {};
  _opts = {};
  _ph = {
    ts: '<#timestamp#>',
    d: '<#day#>',
    we: '<#weekend#>',
    t: '<#today#>',
    s: '<#selected#>',
    a: '<#active#>',
    wn: '<#weekNumber#>',
    wd: '<#weekday#>',
    wdnam: '<#weekdayName#>',
    wdnum: '<#weekdayNumber#>',
    mnam: '<#monthName#>',
    mnum: '<#monthNumber#>',
    md: '<#monthDays#>',
    y: '<#year#>'
  };
  isDate = function(obj) {
    return /Date/.test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
  };
  isWeekend = function(date) {
    var ref;
    return (ref = date.getDay()) === 0 || ref === 6;
  };
  inRange = function(date) {
    var vmi, vmx;
    vmi = isDate(_opts.minDate);
    vmx = isDate(_opts.maxDate);
    if (vmi && vmx) {
      return _opts.minDate <= date && date <= _opts.maxDate;
    } else if (vmi) {
      return _opts.minDate <= date;
    } else if (vmx) {
      return date <= _opts.maxDate;
    } else {
      return true;
    }
  };
  zeroHour = function(date) {
    return date.setHours(0, 0, 0, 0);
  };
  isToday = function(date) {
    return zeroHour(date) === zeroHour(new Date());
  };
  isSelected = function(date) {
    return zeroHour(_d) === zeroHour(date);
  };
  isLeapYear = function(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  };
  getDaysInMonth = function(year, month) {
    return [31, (isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
  };
  getWeek = function(date) {
    var onejan;
    onejan = new Date(date.getFullYear(), 0, 1);
    return Math.ceil((((date - onejan) / 86400000) + onejan.getDay() + 1) / 7);
  };
  changeMonth = function(date, amount) {
    return new Date(date.getFullYear(), date.getMonth() + amount, 1);
  };
  renderDay = function(date) {
    return _tpl.day.replace(_ph.ts, date.getTime()).replace(_ph.d, date.getDate()).replace(_ph.we, isWeekend(date) ? ' weekend' : '').replace(_ph.t, isToday(date) ? ' today' : '').replace(_ph.s, isSelected(date) ? ' selected' : '').replace(_ph.a, inRange(date) ? ' active' : '').replace(_ph.wd, date.getDay());
  };
  renderMonth = function(date) {
    var d, day, month, out, totalDays, wd, year;
    totalDays = getDaysInMonth(date.getYear(), date.getMonth());
    month = date.getMonth();
    year = date.getFullYear();
    out = '';
    if (_opts.showWeekdays) {
      wd = 0;
      out += _tpl.weekOpen.replace(_ph.wn, wd);
      while (wd <= 6) {
        out += _tpl.weekday.replace(_ph.wdnam, _i18n.weekdays[wd]).replace(_ph.wdnum, wd);
        wd++;
      }
      out += _tpl.weekClose;
    }
    d = 0;
    while (d < totalDays) {
      day = new Date(year, month, d + 1);
      if (0 === d || 0 === day.getDay()) {
        out += _tpl.weekOpen.replace(_ph.wn, getWeek(day));
      }
      out += renderDay(day, _tpl.day);
      if (d === totalDays - 1 || day.getDay() === 6) {
        out += _tpl.weekClose;
      }
      d++;
    }
    return _tpl.month.replace(_ph.mnum, month).replace(_ph.mnam, _i18n.months[month]).replace(_ph.y, year).replace(_ph.md, out);
  };
  _config = function(date, tpl, i18n, opts) {
    _d = date;
    _tpl = tpl;
    _i18n = i18n;
    _opts = opts;
    return this;
  };
  $.fn.yacal = function(options) {
    var opts;
    opts = $.extend(true, {}, $.fn.yacal.defaults, options);
    return this.each(function() {
      var nm, out, pm;
      out = '';
      if ($(this).data()) {
        opts = $.extend(true, {}, opts, $(this).data());
      }
      opts.date = new Date(opts.date);
      _config(opts.date, opts.tpl, opts.i18n, {
        nearMonths: parseInt(opts.nearMonths),
        showWD: !!opts.showWeekdays,
        minDate: opts.minDate ? new Date(opts.minDate) : void 0,
        maxDate: opts.maxDate ? new Date(opts.maxDate) : void 0,
        firstDay: parseInt(opts.firstDay)
      });
      if (_opts.nearMonths) {
        pm = _opts.nearMonths;
        while (pm > 0) {
          out += renderMonth(changeMonth(opts.date, -pm));
          pm--;
        }
      }
      out += renderMonth(opts.date);
      if (_opts.nearMonths) {
        nm = 1;
        while (nm <= _opts.nearMonths) {
          out += renderMonth(changeMonth(opts.date, +nm));
          nm++;
        }
      }
      return $(this).append(out);
    });
  };
  $.fn.yacal.defaults = {
    date: new Date(),
    nearMonths: 0,
    showWeekdays: true,
    mimDate: null,
    maxDate: null,
    tpl: {
      day: '<a class="day day' + _ph.wd + '' + _ph.we + '' + _ph.t + '' + _ph.s + '' + _ph.a + '" data-time="' + _ph.ts + '">' + _ph.d + '</a>',
      weekday: '<i class="weekday weekday' + _ph.wdnum + '">' + _ph.wdnam + '</i>',
      weekOpen: '<div class="week week' + _ph.wn + '">',
      weekClose: '</div>',
      month: '<div class="month month' + _ph.mnum + '">' + '<h4>' + _ph.mnam + ' ' + _ph.y + '</h4>' + _ph.md + '</div>'
    },
    i18n: {
      weekdays: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      months: ['January', 'February', 'Marz', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    }
  };
  $.fn.yacal.version = '0.1.1';
  return $('.' + _name).yacal();
})(jQuery, document, window);
